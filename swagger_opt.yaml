openapi: 3.0.0
info:
  title: Sensor Data API
  description: API for storing and retrieving sensor data
  version: 1.0.0
servers:
  - url: https://urq2wttvp5.execute-api.us-east-2.amazonaws.com/dev
paths:
  /sensor_vibration/data:
    post:
      summary: Store vibration data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VibrationData'
      responses:
        '200':
          description: Data stored successfully
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
        '400':
          description: Bad request
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
        '500':
          description: Internal server error
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:lambda:us-east-2:992382434325:function:sensor-data-dev-store_vibration_data"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"

    get:
      summary: Get vibration data
      responses:
        '200':
          description: Successful response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VibrationData'
        '400':
          description: Bad request
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
        '500':
          description: Internal server error
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "arn:aws:lambda:us-east-2:992382434325:function:sensor-data-dev-get_vibration_data"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"

    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      tags:
      - CORS
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "never"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  /sensor_temperature/data:
    post:
      summary: Store temperature data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemperatureData'
      responses:
        '200':
          description: Data stored successfully
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
        '400':
          description: Bad request
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
        '500':
          description: Internal server error
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:lambda:us-east-2:992382434325:function:sensor-data-dev-store_temperature_data"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"

    get:
      summary: Get temperature data
      responses:
        '200':
          description: Successful response
          headers:
            Access-Control-Allow-Origin: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TemperatureData'
        '400':
          description: Bad request
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
        '500':
          description: Internal server error
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "arn:aws:lambda:us-east-2:992382434325:function:sensor-data-dev-get_temperature_data"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"

    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      tags:
      - CORS
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "never"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  /sensor_status/data:
    post:
      summary: Store status data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusData'
      responses:
        '200':
          description: Data stored successfully
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
        '400':
          description: Bad request
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
        '500':
          description: Internal server error
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:lambda:us-east-2:992382434325:function:sensor-data-dev-store_status_data"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"

    get:
      summary: Get status data
      responses:
        '200':
          description: Successful response
          headers:
            Access-Control-Allow-Origin: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatusData'
        '400':
          description: Bad request
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
        '500':
          description: Internal server error
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "arn:aws:lambda:us-east-2:992382434325:function:sensor-data-dev-get_status_data"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"

    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      tags:
      - CORS
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "never"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  /sensor_amps/data:
    post:
      summary: Store amps data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AmpsData'
      responses:
        '200':
          description: Data stored successfully
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
        '400':
          description: Bad request
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
        '500':
          description: Internal server error
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:lambda:us-east-2:992382434325:function:sensor-data-dev-store_amps_data"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"

    get:
      summary: Get amps data
      responses:
        '200':
          description: Successful response
          headers:
            Access-Control-Allow-Origin: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AmpsData'
        '400':
          description: Bad request
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
        '500':
          description: Internal server error
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "arn:aws:lambda:us-east-2:992382434325:function:sensor-data-dev-get_amps_data"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"

    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      tags:
      - CORS
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "never"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  /sensor_wind_direction/data:
    post:
      summary: Store wind direction data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WindDirectionData'
      responses:
        '200':
          description: Data stored successfully
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
        '400':
          description: Bad request
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
        '500':
          description: Internal server error
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:lambda:us-east-2:992382434325:function:sensor-data-dev-store_wind_direction_data"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"

    get:
      summary: Get wind direction data
      responses:
        '200':
          description: Successful response
          headers:
            Access-Control-Allow-Origin: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WindDirectionData'
        '400':
          description: Bad request
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
        '500':
          description: Internal server error
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "arn:aws:lambda:us-east-2:992382434325:function:sensor-data-dev-get_wind_direction_data"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"

    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      tags:
      - CORS
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "never"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  /log/data:
    post:
      summary: Store log data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogData'
      responses:
        '200':
          description: Data stored successfully
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
        '400':
          description: Bad request
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
        '500':
          description: Internal server error
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:lambda:us-east-2:992382434325:function:sensor-data-dev-store_log_data"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"

    get:
      summary: Get log data
      responses:
        '200':
          description: Successful response
          headers:
            Access-Control-Allow-Origin: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogData'
        '400':
          description: Bad request
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
        '500':
          description: Internal server error
          headers:
            Access-Control-Allow-Origin: "'*'"
          content: {}
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "arn:aws:lambda:us-east-2:992382434325:function:sensor-data-dev-get_log_data"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"

    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      tags:
      - CORS
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "never"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

components:
  schemas:
    VibrationData:
      type: object
      properties:
        trend_flag:
          type: string
        status:
          type: string
        frequency:
          type: integer
        acceleration:
          type: number
        velocity:
          type: number

    TemperatureData:
      type: object
      properties:
        trend_flag:
          type: string
        status:
          type: string
        temperature:
          type: number

    StatusData:
      type: object
      properties:
        trend_flag:
          type: string
        status:
          type: string
        value:
          type: string

    AmpsData:
      type: object
      properties:
        trend_flag:
          type: string
        status:
          type: string
        value:
          type: number

    WindDirectionData:
      type: object
      properties:
        trend_flag:
          type: string
        status:
          type: string
        value:
          type: string

    LogData:
      type: object
      properties:
        sensor:
          type: string
        log:
          type: string
